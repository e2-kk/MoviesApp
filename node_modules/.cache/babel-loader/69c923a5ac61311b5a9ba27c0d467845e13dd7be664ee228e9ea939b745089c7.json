{"ast":null,"code":"var _jsxFileName = \"/Users/elinakirspile/moviesapp/src/components/Movies/MovieList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport \"./MovieList.css\";\nimport MovieCard from \"./MovieCard\";\nimport LoadingMovieCard from \"./LoadingMovieCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst api_key = \"f3855f8bdde19bb1dd9b18e80bc383b6\";\n\n//component for rendering movie objects\nconst MovieList = ({\n  likedMovies,\n  setLikedMovies\n}) => {\n  _s();\n  //manage the state of movies' categories\n  const [categories, setCategories] = useState([]);\n  const [currentCategory, setCurrentCategory] = useState([]);\n  const [movies, setMovies] = useState([]);\n  const [sortingOption, setSortingOption] = useState({\n    by: \"default\",\n    order: \"asc\"\n  });\n  const [sortedMovies, setSortedMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [pageNum, setPage] = useState(1);\n  const navigate = useNavigate();\n  const [totalPages, setTotalPages] = useState(0);\n  const skeletons = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n\n  //MOVIES DATA FETCHING\n\n  //fetch movies' categories on the 1st components render\n  useEffect(() => {\n    fetch(`https://api.themoviedb.org/3/genre/movie/list?api_key=${api_key}`).then(response => response.json()).then(data => {\n      setCategories(data.genres);\n    });\n  }, []);\n\n  //get the id of current category\n  const handleCategoryClick = category => {\n    setCurrentCategory(category.id);\n    setPage(1); //when state of the category changes, reset the page state to 1\n    setMovies([]); //when state of the category changes, empty movies array\n    setSortedMovies([]);\n    setSortingOption({\n      by: \"default\",\n      order: \"asc\"\n    });\n  };\n  useEffect(() => {\n    setIsLoading(true);\n    if (currentCategory.length !== 0) {\n      axios.get(`https://api.themoviedb.org/3/discover/movie?api_key=${api_key}&with_genres=${currentCategory}&primary_release_date.gte=2000-01-01&primary_release_date.lte=2024-12-31&with_original_language=en&vote_count.gte=200.0&page=${pageNum}`).then(response => {\n        if (movies.length !== 0) {\n          setMovies(prevMovies => [...prevMovies, ...response.data.results]);\n        } else {\n          setMovies(response.data.results);\n        }\n        setTotalPages(response.data.total_pages);\n        console.log(response.data);\n        //console.log(totalPages);\n        setIsLoading(false);\n      });\n    } else {\n      axios.get(`https://api.themoviedb.org/3/discover/movie?api_key=${api_key}&with_original_language=en&primary_release_date.gte=2000-01-01&primary_release_date.lte=2024-12-31&vote_count.gte=200.0&page=${pageNum}`).then(response => {\n        if (movies.length !== 0) {\n          setMovies(prevMovies => [...prevMovies, ...response.data.results]);\n        } else {\n          setMovies(response.data.results);\n        }\n        setTotalPages(response.data.total_pages);\n\n        //console.log(totalPages);\n        setIsLoading(false);\n      });\n    }\n  }, [currentCategory, pageNum]);\n\n  //console.log(movies);\n\n  //handle Page Change\n\n  const handlePageChange = () => {\n    //check if movie data is available and page number is less than total pages number\n    if (!isLoading && movies && pageNum < totalPages) {\n      //increase the value of page by 1\n      const nextPage = pageNum + 1;\n      //set page state with the next page\n      setPage(nextPage);\n      //navigate to the next page, use nextPage instead of pageNum to navigate to correct new page\n      navigate(`?&with_genres=${currentCategory}&page=${nextPage}`);\n    }\n  };\n\n  //SORTING MOVIES FEATURE\n\n  //get movie sorting option\n  const handleOptionChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setSortingOption(prev => {\n      return {\n        ...prev,\n        [name]: value\n      };\n    });\n    setSortedMovies([]);\n  };\n\n  //sort movies API request by sorting option\n  useEffect(() => {\n    if (sortingOption.by === \"release_date\" && sortingOption.order === \"asc\") {\n      axios.get(`https://api.themoviedb.org/3/discover/movie?api_key=${api_key}&with_genres=${currentCategory}&with_origin_country=US&sort_by=primary_release_date.asc&with_original_language=en&vote_count.gte=200.0&primary_release_date.gte=2000-01-01&primary_release_date.lte=2024-12-31&page=${pageNum}`).then(response => {\n        if (sortedMovies.length !== 0) {\n          setSortedMovies(prevMovies => [...prevMovies, ...response.data.results]);\n        } else {\n          setSortedMovies(response.data.results);\n        }\n      });\n    } else if (sortingOption.by === \"release_date\" && sortingOption.order === \"desc\") {\n      axios.get(`https://api.themoviedb.org/3/discover/movie?api_key=${api_key}&with_genres=${currentCategory}&with_origin_country=US&sort_by=primary_release_date.desc&with_original_language=en&vote_count.gte=200.0&primary_release_date.gte=2000-01-01&primary_release_date.lte=2024-12-31&page=${pageNum}`).then(response => {\n        if (sortedMovies.length !== 0) {\n          setSortedMovies(prevMovies => [...prevMovies, ...response.data.results]);\n        } else {\n          setSortedMovies(response.data.results);\n        }\n      });\n    } else if (sortingOption.by === \"vote_average\" && sortingOption.order === \"asc\") {\n      axios.get(`https://api.themoviedb.org/3/discover/movie?api_key=${api_key}&with_genres=${currentCategory}&with_origin_country=US&sort_by=vote_average.asc&with_original_language=en&vote_count.gte=200.0&primary_release_date.gte=2000-01-01&primary_release_date.lte=2024-12-31&page=${pageNum}`).then(response => {\n        if (sortedMovies.length !== 0) {\n          setSortedMovies(prevMovies => [...prevMovies, ...response.data.results]);\n        } else {\n          setSortedMovies(response.data.results);\n        }\n      });\n    } else if (sortingOption.by === \"vote_average\" && sortingOption.order === \"desc\") {\n      axios.get(`https://api.themoviedb.org/3/discover/movie?api_key=${api_key}&with_genres=${currentCategory}&with_origin_country=US&sort_by=vote_average.desc&with_original_language=en&vote_count.gte=200.0&primary_release_date.gte=2000-01-01&primary_release_date.lte=2024-12-31&page=${pageNum}`).then(response => {\n        if (sortedMovies.length !== 0) {\n          setSortedMovies(prevMovies => [...prevMovies, ...response.data.results]);\n        } else {\n          setSortedMovies(response.data.results);\n        }\n      });\n    } else {\n      setSortedMovies(movies);\n    }\n  }, [sortingOption, movies, currentCategory]);\n\n  //SAVING MOVIES TO WATCHLIST FEATURE\n\n  //get liked movie\n  const handleLike = movie => {\n    const addedMovies = [...likedMovies];\n    const movieIndex = addedMovies.findIndex(item => item.movie.id === movie.id);\n    addedMovies.push({\n      movie: movie\n    });\n    setLikedMovies(addedMovies); //figure out how to not add movie that is already in likedMovies\n  };\n  console.log(likedMovies);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"movies_data_container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie_categories\",\n      children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"categories\",\n        children: categories.map((category, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: currentCategory === category.id ? \"active\" : \"\",\n          onClick: () => {\n            handleCategoryClick(category);\n          },\n          children: category.name\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movie_options\",\n        children: [/*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"option\",\n          name: \"by\",\n          onChange: handleOptionChange,\n          value: sortingOption.by,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"default\",\n            children: \"Sort By\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"release_date\",\n            children: \"Release Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"vote_average\",\n            children: \"Rating\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"option\",\n          name: \"order\",\n          onChange: handleOptionChange,\n          value: sortingOption.order,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"asc\",\n            children: \"Asceding\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"desc\",\n            children: \"Descending\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie_list\",\n      children: [isLoading && skeletons.map(skeletonNum => /*#__PURE__*/_jsxDEV(LoadingMovieCard, {}, skeletonNum, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 13\n      }, this)), sortedMovies.map(movie => /*#__PURE__*/_jsxDEV(MovieCard, {\n        movie: movie,\n        handleLike: handleLike\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handlePageChange,\n      children: \"Load More\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 218,\n    columnNumber: 5\n  }, this);\n};\n_s(MovieList, \"75ZQruad0f8fPTkD92ero6r2UpQ=\", false, function () {\n  return [useNavigate];\n});\n_c = MovieList;\nexport default MovieList;\nvar _c;\n$RefreshReg$(_c, \"MovieList\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","axios","MovieCard","LoadingMovieCard","jsxDEV","_jsxDEV","api_key","MovieList","likedMovies","setLikedMovies","_s","categories","setCategories","currentCategory","setCurrentCategory","movies","setMovies","sortingOption","setSortingOption","by","order","sortedMovies","setSortedMovies","isLoading","setIsLoading","pageNum","setPage","navigate","totalPages","setTotalPages","skeletons","fetch","then","response","json","data","genres","handleCategoryClick","category","id","length","get","prevMovies","results","total_pages","console","log","handlePageChange","nextPage","handleOptionChange","event","name","value","target","prev","handleLike","movie","addedMovies","movieIndex","findIndex","item","push","className","children","map","index","onClick","fileName","_jsxFileName","lineNumber","columnNumber","onChange","skeletonNum","_c","$RefreshReg$"],"sources":["/Users/elinakirspile/moviesapp/src/components/Movies/MovieList.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\n\nimport \"./MovieList.css\";\nimport MovieCard from \"./MovieCard\";\nimport LoadingMovieCard from \"./LoadingMovieCard\";\n\nconst api_key = \"f3855f8bdde19bb1dd9b18e80bc383b6\";\n\n//component for rendering movie objects\nconst MovieList = ({ likedMovies, setLikedMovies }) => {\n  //manage the state of movies' categories\n  const [categories, setCategories] = useState([]);\n  const [currentCategory, setCurrentCategory] = useState([]);\n  const [movies, setMovies] = useState([]);\n  const [sortingOption, setSortingOption] = useState({\n    by: \"default\",\n    order: \"asc\",\n  });\n  const [sortedMovies, setSortedMovies] = useState([]);\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  const [pageNum, setPage] = useState(1);\n\n  const navigate = useNavigate();\n  const [totalPages, setTotalPages] = useState(0);\n\n  const skeletons = [\n    1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n  ];\n\n  //MOVIES DATA FETCHING\n\n  //fetch movies' categories on the 1st components render\n  useEffect(() => {\n    fetch(`https://api.themoviedb.org/3/genre/movie/list?api_key=${api_key}`)\n      .then((response) => response.json())\n      .then((data) => {\n        setCategories(data.genres);\n      });\n  }, []);\n\n  //get the id of current category\n  const handleCategoryClick = (category) => {\n    setCurrentCategory(category.id);\n    setPage(1); //when state of the category changes, reset the page state to 1\n    setMovies([]); //when state of the category changes, empty movies array\n    setSortedMovies([]);\n    setSortingOption({ by: \"default\", order: \"asc\" });\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n    if (currentCategory.length !== 0) {\n      axios\n        .get(\n          `https://api.themoviedb.org/3/discover/movie?api_key=${api_key}&with_genres=${currentCategory}&primary_release_date.gte=2000-01-01&primary_release_date.lte=2024-12-31&with_original_language=en&vote_count.gte=200.0&page=${pageNum}`\n        )\n        .then((response) => {\n          if (movies.length !== 0) {\n            setMovies((prevMovies) => [\n              ...prevMovies,\n              ...response.data.results,\n            ]);\n          } else {\n            setMovies(response.data.results);\n          }\n\n          setTotalPages(response.data.total_pages);\n          console.log(response.data);\n          //console.log(totalPages);\n          setIsLoading(false);\n        });\n    } else {\n      axios\n        .get(\n          `https://api.themoviedb.org/3/discover/movie?api_key=${api_key}&with_original_language=en&primary_release_date.gte=2000-01-01&primary_release_date.lte=2024-12-31&vote_count.gte=200.0&page=${pageNum}`\n        )\n        .then((response) => {\n          if (movies.length !== 0) {\n            setMovies((prevMovies) => [\n              ...prevMovies,\n              ...response.data.results,\n            ]);\n          } else {\n            setMovies(response.data.results);\n          }\n          setTotalPages(response.data.total_pages);\n\n          //console.log(totalPages);\n          setIsLoading(false);\n        });\n    }\n  }, [currentCategory, pageNum]);\n\n  //console.log(movies);\n\n  //handle Page Change\n\n  const handlePageChange = () => {\n    //check if movie data is available and page number is less than total pages number\n    if (!isLoading && movies && pageNum < totalPages) {\n      //increase the value of page by 1\n      const nextPage = pageNum + 1;\n      //set page state with the next page\n      setPage(nextPage);\n      //navigate to the next page, use nextPage instead of pageNum to navigate to correct new page\n      navigate(`?&with_genres=${currentCategory}&page=${nextPage}`);\n    }\n  };\n\n  //SORTING MOVIES FEATURE\n\n  //get movie sorting option\n  const handleOptionChange = (event) => {\n    const { name, value } = event.target;\n    setSortingOption((prev) => {\n      return { ...prev, [name]: value };\n    });\n    setSortedMovies([]);\n  };\n\n  //sort movies API request by sorting option\n  useEffect(() => {\n    if (sortingOption.by === \"release_date\" && sortingOption.order === \"asc\") {\n      axios\n        .get(\n          `https://api.themoviedb.org/3/discover/movie?api_key=${api_key}&with_genres=${currentCategory}&with_origin_country=US&sort_by=primary_release_date.asc&with_original_language=en&vote_count.gte=200.0&primary_release_date.gte=2000-01-01&primary_release_date.lte=2024-12-31&page=${pageNum}`\n        )\n        .then((response) => {\n          if (sortedMovies.length !== 0) {\n            setSortedMovies((prevMovies) => [\n              ...prevMovies,\n              ...response.data.results,\n            ]);\n          } else {\n            setSortedMovies(response.data.results);\n          }\n        });\n    } else if (\n      sortingOption.by === \"release_date\" &&\n      sortingOption.order === \"desc\"\n    ) {\n      axios\n        .get(\n          `https://api.themoviedb.org/3/discover/movie?api_key=${api_key}&with_genres=${currentCategory}&with_origin_country=US&sort_by=primary_release_date.desc&with_original_language=en&vote_count.gte=200.0&primary_release_date.gte=2000-01-01&primary_release_date.lte=2024-12-31&page=${pageNum}`\n        )\n        .then((response) => {\n          if (sortedMovies.length !== 0) {\n            setSortedMovies((prevMovies) => [\n              ...prevMovies,\n              ...response.data.results,\n            ]);\n          } else {\n            setSortedMovies(response.data.results);\n          }\n        });\n    } else if (\n      sortingOption.by === \"vote_average\" &&\n      sortingOption.order === \"asc\"\n    ) {\n      axios\n        .get(\n          `https://api.themoviedb.org/3/discover/movie?api_key=${api_key}&with_genres=${currentCategory}&with_origin_country=US&sort_by=vote_average.asc&with_original_language=en&vote_count.gte=200.0&primary_release_date.gte=2000-01-01&primary_release_date.lte=2024-12-31&page=${pageNum}`\n        )\n        .then((response) => {\n          if (sortedMovies.length !== 0) {\n            setSortedMovies((prevMovies) => [\n              ...prevMovies,\n              ...response.data.results,\n            ]);\n          } else {\n            setSortedMovies(response.data.results);\n          }\n        });\n    } else if (\n      sortingOption.by === \"vote_average\" &&\n      sortingOption.order === \"desc\"\n    ) {\n      axios\n        .get(\n          `https://api.themoviedb.org/3/discover/movie?api_key=${api_key}&with_genres=${currentCategory}&with_origin_country=US&sort_by=vote_average.desc&with_original_language=en&vote_count.gte=200.0&primary_release_date.gte=2000-01-01&primary_release_date.lte=2024-12-31&page=${pageNum}`\n        )\n        .then((response) => {\n          if (sortedMovies.length !== 0) {\n            setSortedMovies((prevMovies) => [\n              ...prevMovies,\n              ...response.data.results,\n            ]);\n          } else {\n            setSortedMovies(response.data.results);\n          }\n        });\n    } else {\n      setSortedMovies(movies);\n    }\n  }, [sortingOption, movies, currentCategory]);\n\n  //SAVING MOVIES TO WATCHLIST FEATURE\n\n  //get liked movie\n  const handleLike = (movie) => {\n    const addedMovies = [...likedMovies];\n    const movieIndex = addedMovies.findIndex(\n      (item) => item.movie.id === movie.id\n    );\n\n    addedMovies.push({ movie: movie });\n\n    setLikedMovies(addedMovies); //figure out how to not add movie that is already in likedMovies\n  };\n\n  console.log(likedMovies);\n\n  return (\n    <div className=\"movies_data_container\">\n      <div className=\"movie_categories\">\n        <ul className=\"categories\">\n          {categories.map((category, index) => (\n            <li\n              className={currentCategory === category.id ? \"active\" : \"\"}\n              key={index}\n              onClick={() => {\n                handleCategoryClick(category);\n              }}\n            >\n              {category.name}\n            </li>\n          ))}\n        </ul>\n        <div className=\"movie_options\">\n          <select\n            className=\"option\"\n            name=\"by\"\n            onChange={handleOptionChange}\n            value={sortingOption.by}\n          >\n            <option value=\"default\">Sort By</option>\n            <option value=\"release_date\">Release Date</option>\n            <option value=\"vote_average\">Rating</option>\n          </select>\n          <select\n            className=\"option\"\n            name=\"order\"\n            onChange={handleOptionChange}\n            value={sortingOption.order}\n          >\n            <option value=\"asc\">Asceding</option>\n            <option value=\"desc\">Descending</option>\n          </select>\n        </div>\n      </div>\n      <div className=\"movie_list\">\n        {isLoading &&\n          skeletons.map((skeletonNum) => (\n            <LoadingMovieCard key={skeletonNum} />\n          ))}\n\n        {sortedMovies.map((movie) => (\n          <MovieCard key={movie.id} movie={movie} handleLike={handleLike} />\n        ))}\n      </div>\n      <button onClick={handlePageChange}>Load More</button>\n    </div>\n  );\n};\n\nexport default MovieList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}